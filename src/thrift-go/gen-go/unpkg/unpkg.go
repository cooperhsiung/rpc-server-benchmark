// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package unpkg

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Name
//  - Version
type PublishRequest struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Version int32 `thrift:"version,2,required" db:"version" json:"version"`
}

func NewPublishRequest() *PublishRequest {
  return &PublishRequest{
Name: "koa-thrift",
}
}


func (p *PublishRequest) GetName() string {
  return p.Name
}

func (p *PublishRequest) GetVersion() int32 {
  return p.Version
}
func (p *PublishRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetVersion = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *PublishRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *PublishRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *PublishRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PublishRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PublishRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *PublishRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteI32(int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *PublishRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PublishRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type PublishResponse struct {
  Code int16 `thrift:"code,1,required" db:"code" json:"code"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewPublishResponse() *PublishResponse {
  return &PublishResponse{}
}


func (p *PublishResponse) GetCode() int16 {
  return p.Code
}
var PublishResponse_Message_DEFAULT string
func (p *PublishResponse) GetMessage() string {
  if !p.IsSetMessage() {
    return PublishResponse_Message_DEFAULT
  }
return *p.Message
}
func (p *PublishResponse) IsSetMessage() bool {
  return p.Message != nil
}

func (p *PublishResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  return nil
}

func (p *PublishResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *PublishResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *PublishResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PublishResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PublishResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI16(int16(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *PublishResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *PublishResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PublishResponse(%+v)", *p)
}

// Attributes:
//  - Name
type FindOneRequest struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewFindOneRequest() *FindOneRequest {
  return &FindOneRequest{
Name: "koa-thrift",
}
}

var FindOneRequest_Name_DEFAULT string = "koa-thrift"

func (p *FindOneRequest) GetName() string {
  return p.Name
}
func (p *FindOneRequest) IsSetName() bool {
  return p.Name != FindOneRequest_Name_DEFAULT
}

func (p *FindOneRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindOneRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FindOneRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindOneRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindOneRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(string(p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *FindOneRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindOneRequest(%+v)", *p)
}

// Attributes:
//  - Type
//  - URL
type Repository struct {
  Type *string `thrift:"type,1" db:"type" json:"type,omitempty"`
  URL *string `thrift:"url,2" db:"url" json:"url,omitempty"`
}

func NewRepository() *Repository {
  return &Repository{}
}

var Repository_Type_DEFAULT string
func (p *Repository) GetType() string {
  if !p.IsSetType() {
    return Repository_Type_DEFAULT
  }
return *p.Type
}
var Repository_URL_DEFAULT string
func (p *Repository) GetURL() string {
  if !p.IsSetURL() {
    return Repository_URL_DEFAULT
  }
return *p.URL
}
func (p *Repository) IsSetType() bool {
  return p.Type != nil
}

func (p *Repository) IsSetURL() bool {
  return p.URL != nil
}

func (p *Repository) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Repository)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *Repository)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *Repository) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Repository"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Repository) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteString(string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *Repository) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err) }
  }
  return err
}

func (p *Repository) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Repository(%+v)", *p)
}

// Attributes:
//  - Name
//  - Version
//  - Description
//  - Main
//  - Repository
//  - Author
//  - License
type FindOneResponse struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  Version *string `thrift:"version,2" db:"version" json:"version,omitempty"`
  Description *string `thrift:"description,3" db:"description" json:"description,omitempty"`
  Main *string `thrift:"main,4" db:"main" json:"main,omitempty"`
  Repository *Repository `thrift:"repository,5" db:"repository" json:"repository,omitempty"`
  Author *string `thrift:"author,6" db:"author" json:"author,omitempty"`
  License *string `thrift:"license,7" db:"license" json:"license,omitempty"`
}

func NewFindOneResponse() *FindOneResponse {
  return &FindOneResponse{}
}

var FindOneResponse_Name_DEFAULT string
func (p *FindOneResponse) GetName() string {
  if !p.IsSetName() {
    return FindOneResponse_Name_DEFAULT
  }
return *p.Name
}
var FindOneResponse_Version_DEFAULT string
func (p *FindOneResponse) GetVersion() string {
  if !p.IsSetVersion() {
    return FindOneResponse_Version_DEFAULT
  }
return *p.Version
}
var FindOneResponse_Description_DEFAULT string
func (p *FindOneResponse) GetDescription() string {
  if !p.IsSetDescription() {
    return FindOneResponse_Description_DEFAULT
  }
return *p.Description
}
var FindOneResponse_Main_DEFAULT string
func (p *FindOneResponse) GetMain() string {
  if !p.IsSetMain() {
    return FindOneResponse_Main_DEFAULT
  }
return *p.Main
}
var FindOneResponse_Repository_DEFAULT *Repository
func (p *FindOneResponse) GetRepository() *Repository {
  if !p.IsSetRepository() {
    return FindOneResponse_Repository_DEFAULT
  }
return p.Repository
}
var FindOneResponse_Author_DEFAULT string
func (p *FindOneResponse) GetAuthor() string {
  if !p.IsSetAuthor() {
    return FindOneResponse_Author_DEFAULT
  }
return *p.Author
}
var FindOneResponse_License_DEFAULT string
func (p *FindOneResponse) GetLicense() string {
  if !p.IsSetLicense() {
    return FindOneResponse_License_DEFAULT
  }
return *p.License
}
func (p *FindOneResponse) IsSetName() bool {
  return p.Name != nil
}

func (p *FindOneResponse) IsSetVersion() bool {
  return p.Version != nil
}

func (p *FindOneResponse) IsSetDescription() bool {
  return p.Description != nil
}

func (p *FindOneResponse) IsSetMain() bool {
  return p.Main != nil
}

func (p *FindOneResponse) IsSetRepository() bool {
  return p.Repository != nil
}

func (p *FindOneResponse) IsSetAuthor() bool {
  return p.Author != nil
}

func (p *FindOneResponse) IsSetLicense() bool {
  return p.License != nil
}

func (p *FindOneResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindOneResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *FindOneResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *FindOneResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *FindOneResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Main = &v
}
  return nil
}

func (p *FindOneResponse)  ReadField5(iprot thrift.TProtocol) error {
  p.Repository = &Repository{}
  if err := p.Repository.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Repository), err)
  }
  return nil
}

func (p *FindOneResponse)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Author = &v
}
  return nil
}

func (p *FindOneResponse)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.License = &v
}
  return nil
}

func (p *FindOneResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindOneResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindOneResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
    if err := oprot.WriteString(string(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMain() {
    if err := oprot.WriteFieldBegin("main", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:main: ", p), err) }
    if err := oprot.WriteString(string(*p.Main)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.main (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:main: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRepository() {
    if err := oprot.WriteFieldBegin("repository", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:repository: ", p), err) }
    if err := p.Repository.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Repository), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:repository: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthor() {
    if err := oprot.WriteFieldBegin("author", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:author: ", p), err) }
    if err := oprot.WriteString(string(*p.Author)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.author (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:author: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetLicense() {
    if err := oprot.WriteFieldBegin("license", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:license: ", p), err) }
    if err := oprot.WriteString(string(*p.License)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.license (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:license: ", p), err) }
  }
  return err
}

func (p *FindOneResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindOneResponse(%+v)", *p)
}

type UnpkgService interface {
  // Parameters:
  //  - Req
  Publish(ctx context.Context, req *PublishRequest) (r *PublishResponse, err error)
  // Parameters:
  //  - Req
  FindOne(ctx context.Context, req *FindOneRequest) (r *FindOneResponse, err error)
}

type UnpkgServiceClient struct {
  c thrift.TClient
}

func NewUnpkgServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UnpkgServiceClient {
  return &UnpkgServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUnpkgServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UnpkgServiceClient {
  return &UnpkgServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUnpkgServiceClient(c thrift.TClient) *UnpkgServiceClient {
  return &UnpkgServiceClient{
    c: c,
  }
}

func (p *UnpkgServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *UnpkgServiceClient) Publish(ctx context.Context, req *PublishRequest) (r *PublishResponse, err error) {
  var _args0 UnpkgServicePublishArgs
  _args0.Req = req
  var _result1 UnpkgServicePublishResult
  if err = p.Client_().Call(ctx, "Publish", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UnpkgServiceClient) FindOne(ctx context.Context, req *FindOneRequest) (r *FindOneResponse, err error) {
  var _args2 UnpkgServiceFindOneArgs
  _args2.Req = req
  var _result3 UnpkgServiceFindOneResult
  if err = p.Client_().Call(ctx, "FindOne", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type UnpkgServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UnpkgService
}

func (p *UnpkgServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UnpkgServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UnpkgServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUnpkgServiceProcessor(handler UnpkgService) *UnpkgServiceProcessor {

  self4 := &UnpkgServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["Publish"] = &unpkgServiceProcessorPublish{handler:handler}
  self4.processorMap["FindOne"] = &unpkgServiceProcessorFindOne{handler:handler}
return self4
}

func (p *UnpkgServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type unpkgServiceProcessorPublish struct {
  handler UnpkgService
}

func (p *unpkgServiceProcessorPublish) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnpkgServicePublishArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Publish", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnpkgServicePublishResult{}
var retval *PublishResponse
  var err2 error
  if retval, err2 = p.handler.Publish(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Publish: " + err2.Error())
    oprot.WriteMessageBegin("Publish", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Publish", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unpkgServiceProcessorFindOne struct {
  handler UnpkgService
}

func (p *unpkgServiceProcessorFindOne) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnpkgServiceFindOneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FindOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnpkgServiceFindOneResult{}
var retval *FindOneResponse
  var err2 error
  if retval, err2 = p.handler.FindOne(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindOne: " + err2.Error())
    oprot.WriteMessageBegin("FindOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FindOne", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type UnpkgServicePublishArgs struct {
  Req *PublishRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUnpkgServicePublishArgs() *UnpkgServicePublishArgs {
  return &UnpkgServicePublishArgs{}
}

var UnpkgServicePublishArgs_Req_DEFAULT *PublishRequest
func (p *UnpkgServicePublishArgs) GetReq() *PublishRequest {
  if !p.IsSetReq() {
    return UnpkgServicePublishArgs_Req_DEFAULT
  }
return p.Req
}
func (p *UnpkgServicePublishArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *UnpkgServicePublishArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnpkgServicePublishArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &PublishRequest{
  Name: "koa-thrift",
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *UnpkgServicePublishArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Publish_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnpkgServicePublishArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *UnpkgServicePublishArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnpkgServicePublishArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UnpkgServicePublishResult struct {
  Success *PublishResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUnpkgServicePublishResult() *UnpkgServicePublishResult {
  return &UnpkgServicePublishResult{}
}

var UnpkgServicePublishResult_Success_DEFAULT *PublishResponse
func (p *UnpkgServicePublishResult) GetSuccess() *PublishResponse {
  if !p.IsSetSuccess() {
    return UnpkgServicePublishResult_Success_DEFAULT
  }
return p.Success
}
func (p *UnpkgServicePublishResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UnpkgServicePublishResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnpkgServicePublishResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PublishResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UnpkgServicePublishResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Publish_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnpkgServicePublishResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UnpkgServicePublishResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnpkgServicePublishResult(%+v)", *p)
}

// Attributes:
//  - Req
type UnpkgServiceFindOneArgs struct {
  Req *FindOneRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUnpkgServiceFindOneArgs() *UnpkgServiceFindOneArgs {
  return &UnpkgServiceFindOneArgs{}
}

var UnpkgServiceFindOneArgs_Req_DEFAULT *FindOneRequest
func (p *UnpkgServiceFindOneArgs) GetReq() *FindOneRequest {
  if !p.IsSetReq() {
    return UnpkgServiceFindOneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *UnpkgServiceFindOneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *UnpkgServiceFindOneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnpkgServiceFindOneArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &FindOneRequest{
  Name: "koa-thrift",
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *UnpkgServiceFindOneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindOne_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnpkgServiceFindOneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *UnpkgServiceFindOneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnpkgServiceFindOneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UnpkgServiceFindOneResult struct {
  Success *FindOneResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUnpkgServiceFindOneResult() *UnpkgServiceFindOneResult {
  return &UnpkgServiceFindOneResult{}
}

var UnpkgServiceFindOneResult_Success_DEFAULT *FindOneResponse
func (p *UnpkgServiceFindOneResult) GetSuccess() *FindOneResponse {
  if !p.IsSetSuccess() {
    return UnpkgServiceFindOneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UnpkgServiceFindOneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UnpkgServiceFindOneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnpkgServiceFindOneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FindOneResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UnpkgServiceFindOneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindOne_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnpkgServiceFindOneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UnpkgServiceFindOneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnpkgServiceFindOneResult(%+v)", *p)
}


